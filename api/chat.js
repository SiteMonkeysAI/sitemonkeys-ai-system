// ZERO-FAILURE CHAT.JS - COMPLETE INTEGRATION WITH PERSONALITY FRAMEWORK
// Enhanced with ‚ÄúHonest Best Friend‚Äù personality system, optimization suggestions, and context-aware responses
import { trackApiCall, formatSessionDataForUI } from ‚Äò./lib/tokenTracker.js‚Äô;
import { EMERGENCY_FALLBACKS, validateVaultStructure, getVaultValue } from ‚Äò./lib/site-monkeys/emergency-fallbacks.js‚Äô;
import { ENFORCEMENT_PROTOCOLS } from ‚Äò./lib/site-monkeys/enforcement-protocols.js‚Äô;
import { QUALITY_ENFORCEMENT } from ‚Äò./lib/site-monkeys/quality-enforcement.js‚Äô;
import { AI_ARCHITECTURE } from ‚Äò./lib/site-monkeys/ai-architecture.js‚Äô;
import { FOUNDER_PROTECTION } from ‚Äò./lib/site-monkeys/founder-protection.js‚Äô;
import zlib from ‚Äòzlib‚Äô; // *** CRITICAL FIX: Import zlib for gzip decompression ***

export default async function handler(req, res) {
res.setHeader(‚ÄòAccess-Control-Allow-Origin‚Äô, ‚Äò*‚Äô);
res.setHeader(‚ÄòAccess-Control-Allow-Methods‚Äô, ‚ÄòPOST, OPTIONS‚Äô);
res.setHeader(‚ÄòAccess-Control-Allow-Headers‚Äô, ‚ÄòContent-Type‚Äô);

if (req.method === ‚ÄòOPTIONS‚Äô) {
res.status(200).end();
return;
}

if (req.method !== ‚ÄòPOST‚Äô) {
res.status(405).json({ error: ‚ÄòMethod not allowed‚Äô });
return;
}

let vaultContent = ‚Äò‚Äô;
let vaultTokens = 0;
let vaultStatus = ‚Äònot_loaded‚Äô;
let vaultHealthy = false;

try {
// *** CRITICAL: Accept vault_content from frontend ***
const {
message,
conversation_history = [],
mode = ‚Äòsite_monkeys‚Äô,
claude_requested = false,
vault_content = null  // NEW: Frontend can send vault content directly
} = req.body;

```
if (!message || typeof message !== 'string') {
  res.status(400).json({ error: 'Message is required and must be a string' });
  return;
}

console.log('Processing chat request in ' + mode + ' mode:', message.substring(0, 100));

// *** VAULT LOADING WITH HARDCODED FALLBACKS ***
if (mode === 'site_monkeys') {
  // Try frontend-provided vault content first
  if (vault_content && vault_content.length > 1000) {
    vaultContent = vault_content;
    vaultTokens = Math.ceil(vaultContent.length / 4);
    vaultStatus = 'loaded_from_frontend';
    vaultHealthy = validateVaultStructure(vaultContent);
    console.log('üéØ Vault loaded from frontend:', vaultTokens + ' tokens, healthy:', vaultHealthy);
  } else {
    // Fallback to KV loading
    try {
      const kv_url = process.env.KV_REST_API_URL;
      const kv_token = process.env.KV_REST_API_TOKEN;
      
      if (!kv_url || !kv_token) {
        throw new Error('KV environment variables not configured');
      }
      
      const kvResponse = await fetch(kv_url + '/get/sitemonkeys_vault_v2', {
        headers: { 
          'Authorization': 'Bearer ' + kv_token,
          'Content-Type': 'application/json'
        }
      });
      
      if (kvResponse.ok) {
        const kvText = await kvResponse.text();
        
        if (kvText && kvText !== 'null' && kvText.trim() !== '') {
          let kvData;
          const kvWrapper = JSON.parse(kvText);
          
          if (kvWrapper.result) {
            kvData = JSON.parse(kvWrapper.result);
          } else if (kvWrapper.compressed) {
            try {
              // *** CRITICAL FIX: Proper gzip decompression ***
              const compressedBuffer = Buffer.from(kvWrapper.data, 'base64');
              const decompressed = zlib.gunzipSync(compressedBuffer).toString('utf-8');
              kvData = JSON.parse(decompressed);
            } catch (decompError) {
              console.error('‚ùå Gzip decompression failed:', decompError.message);
              kvData = kvWrapper;
            }
          } else {
            kvData = kvWrapper;
          }
          
          if (kvData.vault_content && kvData.vault_content.length > 1000) {
            vaultContent = kvData.vault_content;
            vaultTokens = kvData.tokens || Math.ceil(vaultContent.length / 4);
            vaultStatus = 'loaded_from_kv';
            vaultHealthy = validateVaultStructure(vaultContent);
            console.log('‚úÖ Vault loaded from KV: ' + vaultTokens + ' tokens, healthy:', vaultHealthy);
          } else {
            throw new Error('Vault content missing or insufficient');
          }
        } else {
          throw new Error('KV returned empty data');
        }
      } else {
        throw new Error('KV API error: ' + kvResponse.status);
      }
      
    } catch (vaultError) {
      console.error('‚ö†Ô∏è Vault loading failed, using emergency fallbacks:', vaultError.message);
      vaultStatus = 'failed_using_fallbacks';
      vaultContent = EMERGENCY_FALLBACKS.business_logic.pricing_structure + 
                    EMERGENCY_FALLBACKS.business_logic.service_minimums + 
                    EMERGENCY_FALLBACKS.enforcement.founder_protection;
      vaultTokens = Math.ceil(vaultContent.length / 4);
      vaultHealthy = false;
    }
  }
}

// *** ENHANCED PERSONALITY DETERMINATION ***
let personality = claude_requested ? 'claude' : determinePersonality(message, mode, conversation_history);

// *** ENHANCED COST PROTECTION WITH HARDCODED LIMITS ***
if (claude_requested) {
  const estimatedTokens = Math.ceil((buildSystemPrompt(mode, personality, vaultContent, vaultHealthy).length + message.length) / 4) + 500;
  const estimatedCost = (estimatedTokens * 0.015) / 1000;
  
  if (estimatedCost > 0.50) {
    return res.status(200).json({
      response: FOUNDER_PROTECTION.cost_controls.claude_limit_message + ' $' + estimatedCost.toFixed(4) + ' exceeds $0.50 limit.',
      mode_active: mode,
      vault_status: { loaded: vaultStatus !== 'not_loaded', tokens: vaultTokens, healthy: vaultHealthy },
      claude_blocked: true
    });
  }
}

// *** ENHANCED SYSTEM PROMPT WITH PERSONALITY FRAMEWORK ***
const systemPrompt = buildSystemPrompt(mode, personality, vaultContent, vaultHealthy);
const fullPrompt = buildFullPrompt(systemPrompt, message, conversation_history);
const apiResponse = await makeRealAPICall(fullPrompt, personality);

let promptTokens, completionTokens;

if (personality === 'claude') {
  promptTokens = apiResponse.usage?.input_tokens || Math.ceil(fullPrompt.length / 4);
  completionTokens = apiResponse.usage?.output_tokens || Math.ceil(apiResponse.response.length / 4);
} else {
  promptTokens = apiResponse.usage?.prompt_tokens || Math.ceil(fullPrompt.length / 4);
  completionTokens = apiResponse.usage?.completion_tokens || Math.ceil(apiResponse.response.length / 4);
}

const trackingResult = trackApiCall(personality, promptTokens, completionTokens, vaultTokens);

// *** ENHANCED RESPONSE PROCESSING WITH PERSONALITY AND OPTIMIZATION ***
const enhancedResponse = enhanceResponseWithPersonality(apiResponse.response, personality, message, mode, conversation_history);
const optimizedResponse = addOptimizationSuggestions(enhancedResponse, message, mode, vaultContent);
const enforcedResponse = applySystemEnforcement(optimizedResponse, mode, vaultContent, vaultStatus, vaultHealthy);

const sessionData = formatSessionDataForUI();

res.status(200).json({
  response: enforcedResponse,
  mode_active: mode,
  vault_status: {
    loaded: vaultStatus !== 'not_loaded',
    tokens: vaultTokens,
    status: vaultStatus,
    healthy: vaultHealthy,
    source: vaultStatus.includes('frontend') ? 'frontend' : vaultStatus.includes('kv') ? 'kv' : 'fallback'
  },
  enforcement_applied: [
    'truth_enforcement_active',
    'confidence_scoring_applied', 
    'political_neutrality_enforced',
    'personality_framework_active',
    'optimization_suggestions_enabled',
    vaultHealthy ? 'vault_business_logic' : 'emergency_fallback_mode',
    'assumption_analysis_active',
    'founder_protection_active',
    'zero_failure_protocols_active'
  ],
  assumption_analysis: {
    detected: extractAssumptions(enforcedResponse),
    health_score: calculateAssumptionHealth(enforcedResponse)
  },
  personality_analytics: {
    selected: personality,
    reasoning: getPersonalityReasoning(message, personality),
    confidence_level: getResponseConfidenceLevel(enforcedResponse)
  },
  security_pass: true,
  performance: {
    tokens_used: trackingResult.tokens_used,
    prompt_tokens: promptTokens,
    completion_tokens: completionTokens,
    call_cost: trackingResult.call_cost,
    session_total: trackingResult.session_total,
    vault_tokens: vaultTokens,
    api_provider: personality === 'claude' ? 'anthropic' : 'openai'
  },
  session_tracking: sessionData,
  personality_used: personality
});
```

} catch (error) {
console.error(‚Äò‚ùå Chat processing error:‚Äô, error);

```
res.status(500).json({
  response: ENFORCEMENT_PROTOCOLS.error_handling.system_error_response + error.message + 
           '\n\n' + FOUNDER_PROTECTION.system_continuity.error_recovery_message,
  mode_active: req.body.mode || 'site_monkeys',
  vault_status: { loaded: vaultStatus !== 'not_loaded', tokens: vaultTokens, healthy: vaultHealthy },
  enforcement_applied: ['emergency_fallback_active', 'truth_enforcement_active', 'founder_protection_active'],
  error: 'Chat processing failed - emergency protocols active'
});
```

}
}

async function makeRealAPICall(prompt, personality) {
// *** ENHANCED WITH AI ARCHITECTURE FAILOVER ***
if (personality === ‚Äòclaude‚Äô) {
if (!process.env.ANTHROPIC_API_KEY) {
console.warn(‚Äò‚ö†Ô∏è Claude API key missing, failing over to GPT-4‚Äô);
return await makeRealAPICall(prompt, ‚Äòroxy‚Äô); // Failover to GPT
}

```
try {
  const response = await fetch('https://api.anthropic.com/v1/messages', {
    method: 'POST',
    headers: {
      'Authorization': 'Bearer ' + process.env.ANTHROPIC_API_KEY,
      'Content-Type': 'application/json',
      'x-api-version': '2023-06-01'
    },
    body: JSON.stringify({
      model: 'claude-3-sonnet-20240229',
      max_tokens: 1500, // Increased for detailed responses
      messages: [{ role: 'user', content: prompt }]
    })
  });

  const data = await response.json();
  
  if (!response.ok) {
    console.warn('‚ö†Ô∏è Claude API failed, failing over to GPT-4');
    return await makeRealAPICall(prompt, 'roxy'); // Failover to GPT
  }
  
  let responseText = '';
  if (data.content && Array.isArray(data.content) && data.content[0] && data.content[0].text) {
    responseText = data.content[0].text;
  } else if (data.content && typeof data.content === 'string') {
    responseText = data.content;
  } else {
    responseText = 'Claude API response parsing failed';
  }
  
  return {
    response: responseText,
    usage: data.usage || {}
  };
} catch (claudeError) {
  console.warn('‚ö†Ô∏è Claude request failed, failing over to GPT-4:', claudeError.message);
  return await makeRealAPICall(prompt, 'roxy'); // Failover to GPT
}
```

}

if (!process.env.OPENAI_API_KEY) {
throw new Error(‚ÄòOpenAI API key not configured - no fallback available‚Äô);
}

const response = await fetch(‚Äòhttps://api.openai.com/v1/chat/completions‚Äô, {
method: ‚ÄòPOST‚Äô,
headers: {
‚ÄòAuthorization‚Äô: ‚ÄôBearer ‚Äô + process.env.OPENAI_API_KEY,
‚ÄòContent-Type‚Äô: ‚Äòapplication/json‚Äô
},
body: JSON.stringify({
model: ‚Äògpt-3.5-turbo‚Äô,
messages: [{ role: ‚Äòuser‚Äô, content: prompt }],
max_tokens: 1200, // Increased for detailed responses
temperature: personality === ‚Äòeli‚Äô ? 0.3 : 0.7
})
});

const data = await response.json();
return {
response: data.choices[0].message.content,
usage: data.usage
};
}

// *** ENHANCED buildSystemPrompt WITH PERSONALITY FRAMEWORK ***
function buildSystemPrompt(mode, personality, vaultContent = ‚Äò‚Äô, vaultHealthy = false) {
let systemPrompt = ‚Äò‚Äô;

// *** CORE TRUTH-FIRST FOUNDATION ***
systemPrompt += ENFORCEMENT_PROTOCOLS.truth_first.base_directive + ‚Äò\n\n‚Äô;
systemPrompt += ENFORCEMENT_PROTOCOLS.identity.core_identity + ‚Äò\n\n‚Äô;

// *** ENHANCED PERSONALITY SYSTEM WITH ‚ÄúHONEST BEST FRIEND‚Äù FRAMEWORK ***
if (personality === ‚Äòeli‚Äô) {
systemPrompt += `You are Eli, the analytical truth-focused assistant of Site Monkeys AI.

PERSONALITY CORE:

- You are the ‚ÄúHonest Best Friend‚Äù who cares too much about success to lie
- Your approach: ‚ÄúLet me break down the numbers for you‚Ä¶‚Äù and data-driven analysis
- You prioritize evidence, risk assessment, and logical breakdown
- Caring but direct: ‚ÄúI need to be straight with you about this‚Ä¶‚Äù

COMMUNICATION STYLE:

- Lead with data and evidence when available
- Always include confidence levels (High 85%+, Medium 60-84%, Low <60%)
- When uncertain, say ‚ÄúI don‚Äôt have sufficient data‚Äù rather than guess
- Warm but uncompromising: ‚ÄúI care about your success too much to let you chase something that‚Äôll hurt you‚Äù
- Provide detailed analysis when the question warrants it, concise answers for simple queries

RESPONSE FRAMEWORK:

- CONFIDENCE: Always indicate confidence level for factual claims
- EVIDENCE: Base recommendations on verifiable data when possible
- ASSUMPTIONS: Flag any assumptions you‚Äôre making
- ALTERNATIVES: When something won‚Äôt work, show what will`;
  
  } else if (personality === ‚Äòroxy‚Äô) {
  systemPrompt += `You are Roxy, the strategic solution-oriented assistant of Site Monkeys AI.

PERSONALITY CORE:

- You are the ‚ÄúHonest Best Friend‚Äù who focuses on finding paths that actually work
- Your approach: ‚ÄúThat won‚Äôt work, but what if we tried‚Ä¶‚Äù and creative problem-solving
- You prioritize solutions, alternatives, and strategic thinking
- Encouraging but realistic: ‚ÄúThis approach won‚Äôt work, but I see exactly how you can get what you want‚Ä¶‚Äù

COMMUNICATION STYLE:

- Focus on solutions and alternative approaches
- Always include confidence levels for any claims
- When you see a better path, suggest it: ‚ÄúI‚Äôm seeing three different ways you could approach this‚Ä¶‚Äù
- Warm but protective: ‚ÄúYou deserve better than a comforting lie - here‚Äôs what‚Äôs really going on and how to fix it‚Äù
- Provide thorough explanations for strategic questions, brief answers for quick clarifications

RESPONSE FRAMEWORK:

- CONFIDENCE: Always indicate confidence level for any recommendations
- ALTERNATIVES: Present multiple options when possible
- OPTIMIZATION: Spot opportunities for better approaches
- REALITY CHECK: Honest assessment of what will/won‚Äôt work`;
  
  } else { // claude
  systemPrompt += `You are Claude, the comprehensive AI assistant for Site Monkeys.

PERSONALITY CORE:

- You combine Eli‚Äôs analytical rigor with Roxy‚Äôs solution-finding
- Enhanced truth enforcement with meta-validation: ‚ÄúAm I being rigorous enough?‚Äù
- Comprehensive analysis with assumption challenging: ‚ÄúWhat haven‚Äôt we considered?‚Äù
- The most thorough and careful of all personalities

COMMUNICATION STYLE:

- Provide comprehensive analysis with multiple perspectives
- Always include detailed confidence assessments
- Challenge assumptions and explore edge cases
- Warm but exceptionally thorough in truth-telling`;
  }
  
  systemPrompt += ‚Äò\n\n‚Äô;
  
  // *** ENHANCED TRUTH-FIRST REQUIREMENTS ***
  systemPrompt += `TRUTH-FIRST REQUIREMENTS (NON-NEGOTIABLE):
- Include confidence levels for ALL factual claims
- When uncertain, ask clarifying questions rather than guess
- Label speculation clearly with ‚ÄúSPECULATION:‚Äù or ‚ÄúHYPOTHESIS:‚Äù
- Flag assumptions explicitly
- Never soften inconvenient truths - deliver them with care but complete honesty
- Provide ‚ÄúI don‚Äôt know‚Äù when evidence is insufficient

HELPFUL OPTIMIZATION:

- Proactively spot better approaches when you see them
- Suggest improvements when appropriate, but never push
- Pattern: ‚ÄúI see you‚Äôre considering X. That could work, but I‚Äôm noticing Y opportunity that might get you there faster with less risk. Want me to walk through both options?‚Äù
- Only suggest optimizations when genuinely beneficial

RESPONSE INTELLIGENCE:

- Match response depth to question complexity
- Detailed explanations for strategic/complex questions
- Concise answers for simple factual questions
- Always maintain the warm, caring tone while being direct about truth\n\n`;
  
  // *** MODE-SPECIFIC ENHANCEMENTS ***
  if (mode === ‚Äòsite_monkeys‚Äô) {
  if (vaultContent && vaultContent.length > 1000 && vaultHealthy) {
  systemPrompt += ‚ÄòSITE MONKEYS BUSINESS INTELLIGENCE VAULT:\n‚Äô + vaultContent + ‚Äò\n\n‚Äô;
  systemPrompt += ENFORCEMENT_PROTOCOLS.vault_usage.primary_directive + ‚Äò\n\n‚Äô;
  systemPrompt += QUALITY_ENFORCEMENT.response_standards.vault_based + ‚Äò\n\n‚Äô;
  } else {
  console.log(‚Äòüö® Using emergency fallbacks - vault unhealthy or missing‚Äô);
  systemPrompt += ‚ÄòEMERGENCY FALLBACK MODE ACTIVATED:\n‚Äô;
  systemPrompt += EMERGENCY_FALLBACKS.business_logic.pricing_structure + ‚Äò\n‚Äô;
  systemPrompt += EMERGENCY_FALLBACKS.business_logic.service_minimums + ‚Äò\n‚Äô;
  systemPrompt += EMERGENCY_FALLBACKS.enforcement.quality_gates + ‚Äò\n\n‚Äô;
  systemPrompt += QUALITY_ENFORCEMENT.response_standards.fallback_mode + ‚Äò\n\n‚Äô;
  }
  
  // *** HARDCODED FOUNDER PROTECTION (ALWAYS ACTIVE) ***
  systemPrompt += FOUNDER_PROTECTION.pricing.minimum_enforcement + ‚Äò\n\n‚Äô;
  systemPrompt += FOUNDER_PROTECTION.business_integrity.core_principles + ‚Äò\n\n‚Äô;
  }
  
  // *** HARDCODED SYSTEM DIRECTIVES (ALWAYS ACTIVE) ***
  systemPrompt += ENFORCEMENT_PROTOCOLS.system_behavior.response_quality + ‚Äò\n\n‚Äô;
  systemPrompt += ENFORCEMENT_PROTOCOLS.system_behavior.error_prevention + ‚Äò\n\n‚Äô;
  
  return systemPrompt;
  }

function buildFullPrompt(systemPrompt, message, conversationHistory) {
let fullPrompt = systemPrompt;

if (conversationHistory.length > 0) {
fullPrompt += ‚ÄòRECENT CONVERSATION:\n‚Äô;
conversationHistory.slice(-4).forEach(msg => { // Increased context for better responses
fullPrompt += (msg.role === ‚Äòuser‚Äô ? ‚ÄôHuman: ‚Äô : ‚ÄôAssistant: ‚Äô) + msg.content + ‚Äò\n‚Äô;
});
}

fullPrompt += ‚Äô\nCURRENT REQUEST:\nHuman: ‚Äô + message + ‚Äò\n\nProvide a helpful, truth-first response that matches your personality and includes appropriate confidence levels:‚Äô;
return fullPrompt;
}

// *** NEW: ENHANCED PERSONALITY DETERMINATION ***
function determinePersonality(message, mode, conversationHistory = []) {
const analyticalKeywords = [‚Äòanalyze‚Äô, ‚Äòdata‚Äô, ‚Äòrisk‚Äô, ‚Äòtechnical‚Äô, ‚Äòfacts‚Äô, ‚Äòevidence‚Äô, ‚Äòresearch‚Äô, ‚Äòstatistics‚Äô, ‚Äòbreakdown‚Äô, ‚Äònumbers‚Äô];
const creativeKeywords = [‚Äòstrategy‚Äô, ‚Äòoptimize‚Äô, ‚Äòcreative‚Äô, ‚Äòimprove‚Äô, ‚Äòdesign‚Äô, ‚Äòsolution‚Äô, ‚Äòalternatives‚Äô, ‚Äòapproach‚Äô, ‚Äòbetter way‚Äô, ‚Äòideas‚Äô];
const detailRequestWords = [‚Äòexplain‚Äô, ‚Äòdetail‚Äô, ‚Äòthorough‚Äô, ‚Äòcomprehensive‚Äô, ‚Äòwalk through‚Äô, ‚Äòbreak down‚Äô];

const lowerMessage = message.toLowerCase();

// Check for explicit detail requests
const requestsDetail = detailRequestWords.some(word => lowerMessage.includes(word));

// Score message content
const analyticalScore = analyticalKeywords.reduce((score, keyword) =>
score + (lowerMessage.includes(keyword) ? 1 : 0), 0);
const creativeScore = creativeKeywords.reduce((score, keyword) =>
score + (lowerMessage.includes(keyword) ? 1 : 0), 0);

// Consider conversation history for alternating
const lastPersonality = conversationHistory.length > 0 ?
conversationHistory[conversationHistory.length - 1]?.personality : null;

// Decision logic
if (creativeScore > analyticalScore + 1) {
return ‚Äòroxy‚Äô;
} else if (analyticalScore > creativeScore + 1) {
return ‚Äòeli‚Äô;
} else {
// For ambiguous cases, alternate personalities
return lastPersonality === ‚Äòeli‚Äô ? ‚Äòroxy‚Äô : ‚Äòeli‚Äô;
}
}

// *** NEW: RESPONSE ENHANCEMENT WITH PERSONALITY ***
function enhanceResponseWithPersonality(response, personality, originalMessage, mode, conversationHistory) {
let enhanced = response;

// Add confidence scoring if missing
if (!response.includes(‚ÄòCONFIDENCE:‚Äô) && containsFactualClaims(response)) {
const confidenceLevel = assessResponseConfidence(response);
enhanced += `\n\nCONFIDENCE: ${confidenceLevel}`;
}

// Add personality-specific enhancements
if (personality === ‚Äòeli‚Äô && response.length > 100 && !response.includes(‚ÄòEVIDENCE:‚Äô)) {
// Eli would want to cite evidence sources when possible
if (response.includes(‚Äòstudies‚Äô) || response.includes(‚Äòresearch‚Äô) || response.includes(‚Äòdata‚Äô)) {
enhanced += ‚Äò\n\nEVIDENCE: Based on analysis of available information. Consider verifying with primary sources for critical decisions.‚Äô;
}
}

if (personality === ‚Äòroxy‚Äô && response.length > 100 && !response.includes(‚ÄòALTERNATIVES:‚Äô)) {
// Roxy would want to offer alternatives when giving advice
if (response.includes(‚Äòrecommend‚Äô) || response.includes(‚Äòsuggest‚Äô) || response.includes(‚Äòshould‚Äô)) {
enhanced += ‚Äò\n\nALTERNATIVES: This is one approach - would you like me to explore other options that might work for your specific situation?‚Äô;
}
}

return enhanced;
}

// *** NEW: OPTIMIZATION SUGGESTIONS ***
function addOptimizationSuggestions(response, originalMessage, mode, vaultContent) {
const lowerMessage = originalMessage.toLowerCase();
const lowerResponse = response.toLowerCase();

// Only add suggestions when genuinely helpful
let suggestions = [];

// Business optimization opportunities
if (mode === ‚Äòsite_monkeys‚Äô || mode === ‚Äòbusiness‚Äô) {
if (lowerMessage.includes(‚Äòmarketing‚Äô) && !lowerResponse.includes(‚Äòroi‚Äô)) {
suggestions.push(‚Äòüí° OPTIMIZATION: Consider tracking ROI metrics for any marketing initiatives to measure true effectiveness.‚Äô);
}

```
if (lowerMessage.includes('price') || lowerMessage.includes('cost')) {
  if (lowerResponse.includes('$') && !lowerResponse.includes('margin')) {
    suggestions.push('üí° OPTIMIZATION: When evaluating pricing, also consider profit margins and customer lifetime value for the full picture.');
  }
}

if (lowerMessage.includes('automat') && !lowerResponse.includes('fallback')) {
  suggestions.push('üí° OPTIMIZATION: For any automation you implement, ensure you have manual fallback procedures in case of system failures.');
}
```

}

// Strategic thinking opportunities
if (lowerMessage.includes(‚Äòproblem‚Äô) && !lowerResponse.includes(‚Äòroot cause‚Äô)) {
suggestions.push(‚Äòüí° OPTIMIZATION: Consider doing a root cause analysis to address the underlying issue, not just symptoms.‚Äô);
}

if (suggestions.length > 0 && suggestions.length <= 2) { // Limit to avoid overwhelming
return response + ‚Äò\n\n‚Äô + suggestions.join(‚Äô\n‚Äô);
}

return response;
}

// *** ENHANCED ENFORCEMENT WITH PERSONALITY-AWARE LOGIC ***
function applySystemEnforcement(response, mode, vaultContent, vaultStatus, vaultHealthy) {
let enforcedResponse = response;

// *** HARDCODED QUALITY GATES ***
if (!response.includes(‚ÄòCONFIDENCE:‚Äô) && containsFactualClaims(response)) {
enforcedResponse += ‚Äò\n\nCONFIDENCE: Medium (AI processing)‚Äô;
}

// *** HARDCODED POLITICAL NEUTRALITY ***
const politicalKeywords = [‚Äòvote‚Äô, ‚Äòelection‚Äô, ‚Äòdemocrat‚Äô, ‚Äòrepublican‚Äô];
const containsPolitical = politicalKeywords.some(keyword =>
response.toLowerCase().includes(keyword)
);

if (containsPolitical && response.toLowerCase().includes(‚Äòshould vote‚Äô)) {
enforcedResponse += ‚Äò\n\n‚Äô + ENFORCEMENT_PROTOCOLS.neutrality.political_redirect;
}

if (mode === ‚Äòsite_monkeys‚Äô) {
// *** HARDCODED VAULT ENFORCEMENT ***
if (vaultHealthy && !response.includes(‚Äòvault‚Äô) && vaultContent.length > 1000) {
enforcedResponse += ‚Äò\n\nVAULT ENFORCEMENT: Response generated using Site Monkeys business intelligence vault.‚Äô;
} else if (!vaultHealthy) {
enforcedResponse += ‚Äò\n\nEMERGENCY MODE: Response using hardcoded fallback protocols.‚Äô;
}

```
// *** HARDCODED PRICING PROTECTION ***
const priceMatches = response.match(/\$(\d+)/g);
if (priceMatches) {
  const prices = priceMatches.map(match => parseInt(match.replace('$', '')));
  if (prices.some(price => price < 697)) {
    enforcedResponse += '\n\n' + FOUNDER_PROTECTION.pricing.enforcement_message;
  }
}

// *** QUALITY VALIDATION FOR BUSINESS RESPONSES ***
if (response.length < 150 && !response.includes('INSUFFICIENT DATA') && !isSimpleFactualQuery(response)) {
  enforcedResponse += '\n\n' + QUALITY_ENFORCEMENT.minimum_standards.response_depth;
}
```

}

return enforcedResponse;
}

// *** HELPER FUNCTIONS ***
function containsFactualClaims(response) {
const factualIndicators = [‚Äòstudies show‚Äô, ‚Äòresearch indicates‚Äô, ‚Äòdata reveals‚Äô, ‚Äòaccording to‚Äô, ‚Äòstatistics‚Äô, ‚Äòevidence suggests‚Äô, ‚Äòreports indicate‚Äô];
return factualIndicators.some(indicator => response.toLowerCase().includes(indicator));
}

function assessResponseConfidence(response) {
const highConfidenceWords = [‚Äòproven‚Äô, ‚Äòestablished‚Äô, ‚Äòdocumented‚Äô, ‚Äòverified‚Äô];
const lowConfidenceWords = [‚Äòmight‚Äô, ‚Äòcould‚Äô, ‚Äòpossibly‚Äô, ‚Äòperhaps‚Äô, ‚Äòseems‚Äô];

const hasHighConfidence = highConfidenceWords.some(word => response.toLowerCase().includes(word));
const hasLowConfidence = lowConfidenceWords.some(word => response.toLowerCase().includes(word));

if (hasHighConfidence && !hasLowConfidence) return ‚ÄòHigh (85%+)‚Äô;
if (hasLowConfidence) return ‚ÄòLow (40-60%)‚Äô;
return ‚ÄòMedium (60-80%)‚Äô;
}

function isSimpleFactualQuery(response) {
return response.length < 100 && !response.includes(‚Äòanalyze‚Äô) && !response.includes(‚Äòstrategy‚Äô);
}

function getPersonalityReasoning(message, personality) {
if (personality === ‚Äòeli‚Äô) return ‚ÄòAnalytical/technical content detected‚Äô;
if (personality === ‚Äòroxy‚Äô) return ‚ÄòStrategic/solution-focused content detected‚Äô;
return ‚ÄòManual Claude selection‚Äô;
}

function getResponseConfidenceLevel(response) {
if (response.includes(‚ÄòHigh (‚Äô)) return ‚Äòhigh‚Äô;
if (response.includes(‚ÄòLow (‚Äô)) return ‚Äòlow‚Äô;
return ‚Äòmedium‚Äô;
}

function extractAssumptions(response) {
const assumptions = [];
if (response.includes(‚ÄòASSUMPTIONS:‚Äô)) assumptions.push(‚Äòexplicit_assumptions_listed‚Äô);
if (response.includes(‚Äòassume‚Äô) || response.includes(‚Äòassuming‚Äô)) assumptions.push(‚Äòimplicit_assumptions_detected‚Äô);
if (response.includes(‚ÄòSPECULATION:‚Äô) || response.includes(‚ÄòHYPOTHESIS:‚Äô)) assumptions.push(‚Äòspeculation_marked‚Äô);
return assumptions;
}

function calculateAssumptionHealth(response) {
let score = 100;
if (!response.includes(‚ÄòCONFIDENCE:‚Äô)) score -= 20;
if (response.includes(‚Äòprobably‚Äô) || response.includes(‚Äòlikely‚Äô)) score -= 15;
if (!response.includes(‚ÄòI do not know‚Äô) && response.length < 100) score -= 10;
if (response.includes(‚ÄòINSUFFICIENT DATA‚Äô)) score += 10;
return Math.max(score, 0);
}